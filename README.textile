h1. PLint

Plint is a connector module to the LagoonSecurity application (LS), which is an authentication/autorization system developed by XLM. 
It allows you to easily manage your applciations authentication and autorization.

h2. Installation

After downloading the module, add to <b>dependencies.yml</b> of your application:

<pre>
require:
  - yourModulesSource -> plint 0.1alpha5
</pre>

And then execute: 
  @$ play deps@
  @$ play eclipsify@

h2. Configuration

After install Plint, in order to use it in your Play! Application, the following configurations must be made on <b>application.conf</b>:

<pre>
lint.protocol=http // Comunication Protocol with LS
lint.port=8080 // Comunication Port with LS
lint.baseUrl=subdomain.lagoonsecurity.dyndns.org // LS Base access URL
lint.login=loginLagoon // Provided LS Login
lint.password=passwordLagoon // Provided LS password
</pre>

The baseUrl is the location of LS, where the subdomain is the one you registered (p.ex. xlm.lagoonsecurity.dyndns.org).
After the registration of your Organization, and respective subdomain, will be provided a login and a password.

h2. How to use

The following list enumerates the available methods, spcifying input parameteres.
*Note* If any of the following mehtods generates an error, a LintException is thrown.

* Authentication
** "sanitycheck()"
** "identifier()"
* Application Management
** "showApp()"
* Context Management
** "getContexts()"
** "createContext(String name, String activationUrl, String url, String descritpion, boolean copyContext)"
** "updateContext(String newName, String activationUrl, String url, String description, String oldName)"
** "showContext(String contextName)"
** "deleteContext(String contextName)"
* Profile Management
** "getProfiles()"
* User Management
** "login(String user, String password, String context)"
** "logout(Long userID, String context)"
** "createUser(String login, String email, String name, String context)"
** "createUser(String login, String email, String name, boolean ghost, String[] profiles, String context)"
** "registerUser(String password, String token, String context)"
** "activateUser(Long userID, String context)"
** "deactivateUser(Long userID, String context)"
** "reactivateUser(Long userID, String context)"
** "getUsers(String context)"
** "showUser(Long userID, String context)"
** "updateUser(Long userID, String login, String email, String name, boolean ghost, String[] profiles, String context)"
** "updateUser(Long userID, String login, String email, String name, String context)"
** "getPermissions(Long userID, String context)"
